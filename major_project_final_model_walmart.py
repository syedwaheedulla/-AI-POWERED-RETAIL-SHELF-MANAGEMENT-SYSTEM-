# -*- coding: utf-8 -*-
"""major project final model walmart

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-bifit4aUrGlgenuiKQfwyZ06tAkCBON
"""

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
import joblib
import matplotlib.pyplot as plt

# Load the dataset from Kaggle (upload the file directly to Colab or use the Kaggle API to fetch it)
data_path = '/content/walmart-sales-dataset-of-45stores.csv'  # Replace this with the correct path

# Load the dataset into pandas DataFrame
df = pd.read_csv(data_path)

# Check the first few rows
df.head()

# Handle missing values and convert 'Date' column to datetime format
df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)  # Correctly parse dates in DD-MM-YYYY format
# Handle missing values and convert 'Date' column to datetime format with specific format
df['Date'] = pd.to_datetime(df['Date'], format='%d-%m-%Y')  # Specify the date format explicitly

# Feature Engineering (Extract useful features from the 'Date' column)
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month
df['Day'] = df['Date'].dt.day
df['Weekday'] = df['Date'].dt.weekday

# Drop the 'Date' column as it's no longer needed
df.drop('Date', axis=1, inplace=True)

# Split data into features (X) and target variable (y)
X = df.drop('Weekly_Sales', axis=1)  # Features
y = df['Weekly_Sales']  # Target variable

# Train-test split (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train a RandomForestRegressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)

# Save the trained model using joblib
joblib.dump(model, 'walmart_sales_model.pkl')

# Optional: Visualize the model's performance
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Sales")
plt.ylabel("Predicted Sales")
plt.title("Actual vs Predicted Weekly Sales")
plt.show()

print(f"Mean Absolute Error (MAE): {mae}")

plt.scatter(y_test, y_pred)
plt.errorbar(y_test, y_pred, yerr=np.abs(y_test - y_pred), fmt='none', ecolor='red', capsize=7)  # Add error bars
plt.xlabel("Actual Sales")
plt.ylabel("Predicted Sales")
plt.title("Actual vs Predicted Weekly Sales with Error Bars")
plt.show()